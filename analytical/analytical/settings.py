"""
Django settings for analytical project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Virtual Environment Verification (NON-NEGOTIABLE - T006)
def verify_virtual_environment():
    """Verify that we're running in a virtual environment"""
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        raise RuntimeError(
            "CRITICAL ERROR: Virtual environment is not activated!\n"
            "Please activate the virtual environment before running Django:\n"
            "Windows: .\\venv\\Scripts\\Activate.ps1\n"
            "Linux/Mac: source venv/bin/activate\n"
            "This is NON-NEGOTIABLE for security and dependency isolation."
        )
    print("Virtual environment verified successfully")

# Verify virtual environment on startup
verify_virtual_environment()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^4_0i9d%o7)p)*8kf7ii#zkthv717)09s63t24!kse2i=xl0e$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party packages
    'rest_framework',
    'corsheaders',
    'django_cleanup.apps.CleanupConfig',
    
    # Local apps
    'analytics',
    'prescription',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static file serving
    'corsheaders.middleware.CorsMiddleware',  # CORS support
    'analytics.middleware.security_middleware.SecurityMiddleware',  # T012 - Security middleware
    'analytics.middleware.security_middleware.AuditMiddleware',  # T012 - Audit logging
    'analytics.middleware.security_middleware.PerformanceMiddleware',  # T012 - Performance monitoring
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'analytics.middleware.security_middleware.ErrorHandlingMiddleware',  # T012 - Error handling
]

ROOT_URLCONF = 'analytical.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'analytics' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'analytical.wsgi.application'

# Use custom User model for analytics
AUTH_USER_MODEL = 'analytics.User'  # Use custom User model


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database Configuration (T003 - PostgreSQL)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'analytical',
        'USER': 'postgres',
        'PASSWORD': 'Afroafri117!@',
        'HOST': 'localhost',
        'PORT': '5432',
        'OPTIONS': {
            'connect_timeout': 10,
            'application_name': 'analytical_django',
        },
        'CONN_MAX_AGE': 600,  # Connection pooling - 10 minutes
        'CONN_HEALTH_CHECKS': True,  # Enable connection health checks
        'ATOMIC_REQUESTS': False,  # Disable for better performance
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Authentication redirects
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redis Cache Configuration (T004 - Redis with 'analytical' key prefix)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://localhost:6379/1',
        'KEY_PREFIX': 'analytical',
        'VERSION': 1,
    },
    'sessions': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://localhost:6379/2',
        'KEY_PREFIX': 'analytical:sessions',
        'VERSION': 1,
    },
    'analysis': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://localhost:6379/3',
        'KEY_PREFIX': 'analytical:analysis',
        'VERSION': 1,
    }
}

# Celery Configuration (T005 - Celery with Redis broker and 'analytical' queue)
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_TASK_DEFAULT_QUEUE = 'analytical'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_RESULT_EXPIRES = 3600  # 1 hour
CELERY_TASK_ROUTES = {
    'analytics.tasks.file_processing_tasks.*': {'queue': 'file_processing'},
    'analytics.tasks.analysis_tasks.*': {'queue': 'analysis'},
    'analytics.tasks.llm_tasks.*': {'queue': 'llm'},
    'analytics.tasks.agent_tasks.*': {'queue': 'agent'},
    'analytics.tasks.report_tasks.*': {'queue': 'reports'},
    'analytics.tasks.image_tasks.*': {'queue': 'images'},
    'analytics.tasks.sandbox_tasks.*': {'queue': 'sandbox'},
    'analytics.tasks.maintenance_tasks.*': {'queue': 'maintenance'},
}

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FileUploadParser',
    ],
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# Static Files Configuration
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'analytics' / 'static',
]

# Media Files Configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# CSRF Protection Configuration (T108)
CSRF_COOKIE_SECURE = not DEBUG  # Use secure cookies in production
CSRF_COOKIE_HTTPONLY = True     # Prevent JavaScript access to CSRF token
CSRF_COOKIE_SAMESITE = 'Strict' # Strict SameSite policy
CSRF_COOKIE_AGE = 3600          # CSRF token expires in 1 hour
CSRF_USE_SESSIONS = False       # Use cookies instead of sessions for better performance
CSRF_COOKIE_NAME = 'analytical_csrftoken'  # Custom cookie name
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'      # Custom header name
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    # Add production origins here
]

# Additional CSRF settings for API endpoints
CSRF_FAILURE_VIEW = 'analytics.views.csrf_failure'  # Custom CSRF failure handler

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'analytics': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Data Analysis Settings
PANDAS_AI_ENABLED = False  # NON-NEGOTIABLE - No pandas-ai in production
MATPLOTLIB_BACKEND = 'Agg'  # NON-NEGOTIABLE - Use Agg backend for matplotlib

# Google AI API Configuration (No .env - Direct Configuration)
# All configuration is directly in settings.py as per project requirements
# GOOGLE_AI_API_KEY = 'AIzaSyDKU6cZTFq-PyuNsedFSEQLavmXpVM1Oc4'
GOOGLE_AI_API_KEY = 'AIzaSyBZMrHbI623A5Nbjz2QEK1_4nguL5wTm8s'
GOOGLE_AI_MODEL = 'models/gemini-2.0-flash'
GOOGLE_AI_GENERATION_CONFIG = {
    'temperature': 0.7,
    'top_p': 0.8,
    'top_k': 40,
    'max_output_tokens': 8192,  # Increased from 2048 to 8192 tokens
}
GOOGLE_AI_SAFETY_SETTINGS = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    }
]

# Token Management
MAX_TOKENS_PER_USER = 10000000  # Increased to 10M tokens per user per month
TOKEN_COST_PER_INPUT = 0.0005  # Cost per input token
TOKEN_COST_PER_OUTPUT = 0.0015  # Cost per output token

# Storage Limits
MAX_STORAGE_PER_USER = 250 * 1024 * 1024  # 250MB per user
STORAGE_WARNING_THRESHOLD = 200 * 1024 * 1024  # 200MB warning threshold

# Audit Trail Settings
AUDIT_RETENTION_DAYS = 365  # Keep audit logs for 1 year
AUDIT_MASK_SENSITIVE_DATA = True

# Agentic AI Settings
AGENT_MAX_STEPS = 20
AGENT_MAX_COST = 10000  # tokens
AGENT_MAX_TIME = 1800  # 30 minutes
AGENT_VERSION = "1.0"

# Performance Settings
CACHE_TTL = 300  # 5 minutes default cache TTL
ANALYSIS_CACHE_TTL = 3600  # 1 hour for analysis results
SESSION_CACHE_TTL = 86400  # 24 hours for session data

# Memory Optimization Settings
ENABLE_MEMORY_MONITORING = True
MEMORY_MONITORING_INTERVAL = 30  # seconds
MEMORY_THRESHOLDS = {
    'critical': 0.90,  # 90% memory usage
    'warning': 0.80,    # 80% memory usage
    'optimal': 0.70     # 70% memory usage
}
MEMORY_CACHE_CLEANUP_THRESHOLD = 0.75  # Clean cache at 75% memory
MEMORY_GC_THRESHOLD = 0.85  # Force garbage collection at 85%
MAX_LAZY_LOADERS = 1000  # Maximum number of lazy loaders
MEMORY_HISTORY_SIZE = 100  # Maximum memory history entries

# Query Optimization Settings
QUERY_OPTIMIZATION_CACHE_TTL = 300  # 5 minutes for query optimization cache
ENABLE_QUERY_OPTIMIZATION = True
QUERY_OPTIMIZATION_LOGGING = True
MAX_QUERY_EXECUTION_TIME = 5.0  # Maximum query execution time in seconds
QUERY_OPTIMIZATION_THRESHOLD = 1.0  # Threshold for optimization recommendations

# Image Compression Settings
IMAGE_COMPRESSION_ENABLED = True
IMAGE_COMPRESSION_QUALITY_DEFAULT = 85
IMAGE_COMPRESSION_LEVELS = {
    'ultra': {'quality': 30, 'optimize': True, 'progressive': True},
    'high': {'quality': 60, 'optimize': True, 'progressive': True},
    'medium': {'quality': 80, 'optimize': True, 'progressive': False},
    'low': {'quality': 95, 'optimize': False, 'progressive': False}
}
IMAGE_THUMBNAIL_SIZES = {
    'thumbnail': (150, 150),
    'small': (300, 300),
    'medium': (600, 600),
    'large': (1200, 1200),
    'xlarge': (1920, 1080)
}
IMAGE_AUTO_OPTIMIZE_THRESHOLD_MB = 1.0  # Auto-optimize images larger than this
IMAGE_CLEANUP_DAYS = 30  # Clean up compressed images older than this

# Background Monitoring Settings
ENABLE_BACKGROUND_MONITORING = False
SYSTEM_MONITORING_INTERVAL = 60  # seconds
CLEANUP_TASKS_INTERVAL = 3600  # 1 hour
PERFORMANCE_CHECK_INTERVAL = 300  # 5 minutes
HEALTH_CHECK_INTERVAL = 1800  # 30 minutes

# Cleanup Thresholds
OLD_SESSIONS_CLEANUP_DAYS = 90
OLD_AUDIT_TRAILS_CLEANUP_DAYS = 365
OLD_IMAGES_CLEANUP_DAYS = 180
OLD_VECTOR_NOTES_CLEANUP_DAYS = 365
MAX_FILE_SIZE_MB = 100
MAX_CACHE_SIZE_MB = 500

# Performance Thresholds
PERFORMANCE_THRESHOLDS = {
    'memory_usage_percent': 85,
    'cpu_usage_percent': 80,
    'disk_usage_percent': 90,
    'response_time_ms': 5000,
    'database_query_time_ms': 1000,
}

# Backup Settings
BACKUP_DIR = 'backups'
BACKUP_RETENTION_DAYS = 30
BACKUP_COMPRESSION = True
BACKUP_FORMAT = 'custom'  # 'sql', 'custom', or 'directory'
BACKUP_SCHEDULE_HOURS = 24  # Automatic backup every 24 hours

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# Rate Limiting Configuration
if DEBUG:
    # Development mode - very lenient rate limiting
    RATE_LIMITING_ENABLED = False  # Disable rate limiting in development
    RATE_LIMITING_STRICT = False
    RATE_LIMITING_EXEMPT_PATHS = [
        '/admin/',
        '/static/',
        '/media/',
        '/health/',
        '/metrics/',
        '/',  # Exempt root path
        '/favicon.ico',
    ]
else:
    # Production mode - normal rate limiting
    RATE_LIMITING_ENABLED = True
    RATE_LIMITING_STRICT = True
    RATE_LIMITING_EXEMPT_PATHS = [
        '/admin/',
        '/static/',
        '/media/',
        '/health/',
        '/metrics/',
    ]

# Ollama Configuration (for development)
USE_OLLAMA = False  # Set to False for production (use Google AI)
OLLAMA_URL = 'http://localhost:11434'
OLLAMA_MODEL = 'deepseek-r1:8b'  # Change to your preferred model
OLLAMA_GENERATION_CONFIG = {
    'temperature': 0.7,
    'top_p': 0.9,
    'max_tokens': 4000
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'prescription': {
            'format': '[PRESCRIPTION] {levelname} {asctime} {module} {funcName}:{lineno} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'prescription_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'prescription.log'),
            'formatter': 'prescription',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'prescription': {
            'handlers': ['prescription_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'prescription.models': {
            'handlers': ['prescription_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'prescription.views': {
            'handlers': ['prescription_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'prescription.services': {
            'handlers': ['prescription_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}