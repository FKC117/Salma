# Generated by Django 4.2.7 on 2025-09-24 05:29

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("analytics", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="VectorNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title or summary of the content", max_length=255
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Main content text for embedding generation"
                    ),
                ),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("dataset", "Dataset-specific"),
                            ("global", "Global knowledge"),
                        ],
                        help_text="Scope of the knowledge (dataset-specific or global)",
                        max_length=20,
                    ),
                ),
                (
                    "embedding",
                    models.JSONField(
                        default=list, help_text="Vector embedding stored as JSON array"
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        default="all-MiniLM-L6-v2",
                        help_text="Model used to generate the embedding",
                        max_length=100,
                    ),
                ),
                (
                    "embedding_dimension",
                    models.PositiveIntegerField(
                        default=384, help_text="Dimension of the embedding vector"
                    ),
                ),
                (
                    "metadata_json",
                    models.JSONField(
                        default=dict, help_text="Additional metadata for the note"
                    ),
                ),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("dataset_metadata", "Dataset Metadata"),
                            ("analysis_result", "Analysis Result"),
                            ("tool_documentation", "Tool Documentation"),
                            ("error_pattern", "Error Pattern"),
                            ("best_practice", "Best Practice"),
                            ("user_insight", "User Insight"),
                        ],
                        help_text="Type of content stored in this note",
                        max_length=50,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=1.0,
                        help_text="Confidence score for the content quality",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this note has been retrieved",
                    ),
                ),
                (
                    "last_accessed",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this note was last retrieved",
                        null=True,
                    ),
                ),
                (
                    "is_pii_masked",
                    models.BooleanField(
                        default=True,
                        help_text="Whether PII has been masked in this content",
                    ),
                ),
                (
                    "sanitized",
                    models.BooleanField(
                        default=True,
                        help_text="Whether content has been sanitized for security",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dataset",
                    models.ForeignKey(
                        blank=True,
                        help_text="Dataset this note belongs to (null for global scope)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vector_notes",
                        to="analytics.dataset",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who owns this note",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vector_notes",
                        to="analytics.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vector Note",
                "verbose_name_plural": "Vector Notes",
                "db_table": "analytics_vector_note",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["scope", "dataset", "created_at"],
                        name="analytics_v_scope_e9836b_idx",
                    ),
                    models.Index(
                        fields=["user", "scope"], name="analytics_v_user_id_e4c061_idx"
                    ),
                    models.Index(
                        fields=["content_type"], name="analytics_v_content_dd0c3f_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="analytics_v_created_e3f21c_idx"
                    ),
                    models.Index(
                        fields=["usage_count"], name="analytics_v_usage_c_79d0c2_idx"
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="vectornote",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("scope", "global"), ("dataset__isnull", False), _connector="OR"
                ),
                name="dataset_required_for_dataset_scope",
            ),
        ),
    ]
