# Generated by Django 4.2.7 on 2025-09-24 03:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AgentRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "goal",
                    models.TextField(
                        help_text="User-defined analysis goal or question"
                    ),
                ),
                (
                    "plan_json",
                    models.JSONField(
                        default=dict,
                        help_text="JSON object containing the agent's analysis plan",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("running", "Running"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planning",
                        help_text="Current status of the agent run",
                        max_length=20,
                    ),
                ),
                (
                    "current_step",
                    models.PositiveIntegerField(
                        default=0, help_text="Current step number in the plan"
                    ),
                ),
                (
                    "total_steps",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of steps planned"
                    ),
                ),
                (
                    "max_steps",
                    models.PositiveIntegerField(
                        default=20,
                        help_text="Maximum steps allowed (resource constraint)",
                    ),
                ),
                (
                    "max_cost",
                    models.PositiveIntegerField(
                        default=10000,
                        help_text="Maximum cost allowed in tokens (resource constraint)",
                    ),
                ),
                (
                    "max_time",
                    models.PositiveIntegerField(
                        default=1800,
                        help_text="Maximum time allowed in seconds (resource constraint)",
                    ),
                ),
                (
                    "total_cost",
                    models.PositiveIntegerField(
                        default=0, help_text="Total cost incurred so far in tokens"
                    ),
                ),
                (
                    "total_time",
                    models.PositiveIntegerField(
                        default=0, help_text="Total time elapsed in seconds"
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Progress percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "agent_version",
                    models.CharField(
                        default="1.0",
                        help_text="Version of the agent system used",
                        max_length=20,
                    ),
                ),
                (
                    "llm_model",
                    models.CharField(
                        default="gemini-1.5-flash",
                        help_text="LLM model used for planning and execution",
                        max_length=100,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="When the agent run started", null=True
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        blank=True, help_text="When the agent run completed", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if run failed", null=True
                    ),
                ),
                (
                    "correlation_id",
                    models.CharField(
                        help_text="Unique correlation ID for tracking",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Agent Run",
                "verbose_name_plural": "Agent Runs",
                "db_table": "analytics_agent_run",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AnalysisResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Result name", max_length=255)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Result description", null=True
                    ),
                ),
                (
                    "result_data",
                    models.JSONField(
                        default=dict,
                        help_text="Main result data (tables, statistics, etc.)",
                    ),
                ),
                (
                    "parameters_used",
                    models.JSONField(
                        default=dict, help_text="Parameters used for the analysis"
                    ),
                ),
                (
                    "execution_time_ms",
                    models.PositiveIntegerField(
                        default=0, help_text="Execution time in milliseconds"
                    ),
                ),
                (
                    "cache_key",
                    models.CharField(
                        help_text="Cache key for this result",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "cache_expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When the cache expires", null=True
                    ),
                ),
                (
                    "is_cached",
                    models.BooleanField(
                        default=True, help_text="Whether this result is cached"
                    ),
                ),
                (
                    "output_type",
                    models.CharField(
                        choices=[
                            ("table", "Data Table"),
                            ("chart", "Chart/Graph"),
                            ("text", "Text Report"),
                            ("mixed", "Mixed Content"),
                        ],
                        help_text="Type of output generated",
                        max_length=50,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        blank=True,
                        help_text="Path to generated file (if any)",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "file_size_bytes",
                    models.PositiveBigIntegerField(
                        default=0, help_text="Size of generated file in bytes"
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Confidence score for the result",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Quality score for the result",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Analysis Result",
                "verbose_name_plural": "Analysis Results",
                "db_table": "analytics_analysis_result",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AnalysisSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Session name", max_length=255)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Session description", null=True
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the session is currently active",
                    ),
                ),
                (
                    "auto_save",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to automatically save analysis results",
                    ),
                ),
                (
                    "current_analysis_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="ID of the current analysis being performed",
                        null=True,
                    ),
                ),
                (
                    "session_data",
                    models.JSONField(
                        default=dict, help_text="Session-specific data and state"
                    ),
                ),
                (
                    "user_preferences",
                    models.JSONField(
                        default=dict, help_text="User preferences for this session"
                    ),
                ),
                (
                    "analysis_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of analyses performed in this session",
                    ),
                ),
                (
                    "last_analysis_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the last analysis was performed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_accessed",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the session was last accessed",
                    ),
                ),
            ],
            options={
                "verbose_name": "Analysis Session",
                "verbose_name_plural": "Analysis Sessions",
                "db_table": "analytics_analysis_session",
                "ordering": ["-last_accessed"],
            },
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable name of the dataset", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the dataset", null=True
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        help_text="Original filename when uploaded", max_length=255
                    ),
                ),
                (
                    "file_size_bytes",
                    models.PositiveBigIntegerField(
                        help_text="Size of the original file in bytes"
                    ),
                ),
                (
                    "file_hash",
                    models.CharField(
                        help_text="SHA-256 hash of the original file for integrity verification",
                        max_length=64,
                    ),
                ),
                (
                    "original_format",
                    models.CharField(
                        choices=[
                            ("csv", "CSV"),
                            ("xls", "XLS"),
                            ("xlsx", "XLSX"),
                            ("json", "JSON"),
                        ],
                        help_text="Original file format",
                        max_length=10,
                    ),
                ),
                (
                    "parquet_path",
                    models.CharField(
                        help_text="Path to the Parquet file in media storage",
                        max_length=500,
                    ),
                ),
                (
                    "parquet_size_bytes",
                    models.PositiveBigIntegerField(
                        default=0, help_text="Size of the Parquet file in bytes"
                    ),
                ),
                (
                    "parquet_created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the Parquet file was created"
                    ),
                ),
                (
                    "row_count",
                    models.PositiveIntegerField(
                        help_text="Number of rows in the dataset"
                    ),
                ),
                (
                    "column_count",
                    models.PositiveIntegerField(
                        help_text="Number of columns in the dataset"
                    ),
                ),
                (
                    "data_types",
                    models.JSONField(
                        default=dict,
                        help_text="Column data types detected during processing",
                    ),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        help_text="Current processing status",
                        max_length=20,
                    ),
                ),
                (
                    "processing_errors",
                    models.JSONField(
                        default=list,
                        help_text="Any errors encountered during processing",
                    ),
                ),
                (
                    "processing_warnings",
                    models.JSONField(
                        default=list, help_text="Warnings generated during processing"
                    ),
                ),
                (
                    "security_scan_passed",
                    models.BooleanField(
                        default=False, help_text="Whether security scan passed"
                    ),
                ),
                (
                    "security_warnings",
                    models.JSONField(
                        default=list, help_text="Security warnings from scan"
                    ),
                ),
                (
                    "sanitized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether data was sanitized (formulas/macros removed)",
                    ),
                ),
                (
                    "data_quality_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Data quality score (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "completeness_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Data completeness score (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "consistency_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Data consistency score (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional metadata about the dataset"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list, help_text="User-defined tags for categorization"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether dataset is publicly accessible",
                    ),
                ),
                (
                    "access_level",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("shared", "Shared"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Dataset access level",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_accessed",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When dataset was last accessed",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dataset",
                "verbose_name_plural": "Datasets",
                "db_table": "analytics_dataset",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "token_usage_current_month",
                    models.PositiveIntegerField(
                        default=0, help_text="Current month's token usage"
                    ),
                ),
                (
                    "token_usage_last_reset",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When token usage was last reset",
                    ),
                ),
                (
                    "max_tokens_per_month",
                    models.PositiveIntegerField(
                        default=1000000, help_text="Maximum tokens allowed per month"
                    ),
                ),
                (
                    "storage_used_bytes",
                    models.PositiveBigIntegerField(
                        default=0, help_text="Current storage usage in bytes"
                    ),
                ),
                (
                    "max_storage_bytes",
                    models.PositiveBigIntegerField(
                        default=262144000, help_text="Maximum storage allowed in bytes"
                    ),
                ),
                (
                    "storage_warning_sent",
                    models.BooleanField(
                        default=False, help_text="Whether storage warning has been sent"
                    ),
                ),
                (
                    "preferred_theme",
                    models.CharField(
                        choices=[
                            ("dark", "Dark Theme"),
                            ("light", "Light Theme"),
                            ("auto", "Auto (System)"),
                        ],
                        default="dark",
                        help_text="User's preferred UI theme",
                        max_length=20,
                    ),
                ),
                (
                    "auto_save_analysis",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to automatically save analysis results",
                    ),
                ),
                (
                    "notification_preferences",
                    models.JSONField(
                        default=dict, help_text="User notification preferences"
                    ),
                ),
                (
                    "is_premium",
                    models.BooleanField(
                        default=False, help_text="Whether user has premium features"
                    ),
                ),
                (
                    "account_suspended",
                    models.BooleanField(
                        default=False, help_text="Whether account is suspended"
                    ),
                ),
                (
                    "suspension_reason",
                    models.TextField(
                        blank=True, help_text="Reason for account suspension", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_activity",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Last user activity timestamp",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="analytics_user_set",
                        related_query_name="analytics_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="analytics_user_set",
                        related_query_name="analytics_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "analytics_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="SandboxExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.TextField(help_text="Code to be executed")),
                (
                    "language",
                    models.CharField(
                        choices=[("python", "Python"), ("r", "R"), ("sql", "SQL")],
                        default="python",
                        help_text="Programming language",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("timeout", "Timeout"),
                        ],
                        default="pending",
                        help_text="Execution status",
                        max_length=20,
                    ),
                ),
                (
                    "output",
                    models.TextField(
                        blank=True, help_text="Execution output", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if execution failed",
                        null=True,
                    ),
                ),
                (
                    "execution_time_ms",
                    models.PositiveIntegerField(
                        default=0, help_text="Execution time in milliseconds"
                    ),
                ),
                (
                    "memory_used_mb",
                    models.FloatField(default=0.0, help_text="Memory used in MB"),
                ),
                (
                    "cpu_usage_percent",
                    models.FloatField(default=0.0, help_text="CPU usage percentage"),
                ),
                (
                    "security_scan_passed",
                    models.BooleanField(
                        default=False, help_text="Whether security scan passed"
                    ),
                ),
                (
                    "security_warnings",
                    models.JSONField(default=list, help_text="Security warnings"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="When execution started", null=True
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        blank=True, help_text="When execution finished", null=True
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        help_text="Session this execution belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sandbox_executions",
                        to="analytics.analysissession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who initiated the execution",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sandbox_executions",
                        to="analytics.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sandbox Execution",
                "verbose_name_plural": "Sandbox Executions",
                "db_table": "analytics_sandbox_execution",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReportGeneration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Report name", max_length=255)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Report description", null=True
                    ),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("standard", "Standard Report"),
                            ("executive", "Executive Summary"),
                            ("technical", "Technical Report"),
                            ("custom", "Custom Report"),
                        ],
                        help_text="Report template type",
                        max_length=50,
                    ),
                ),
                (
                    "content_sections",
                    models.JSONField(
                        default=list, help_text="Sections to include in the report"
                    ),
                ),
                (
                    "custom_settings",
                    models.JSONField(default=dict, help_text="Custom report settings"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("generating", "Generating"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        help_text="Generation status",
                        max_length=20,
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Generation progress percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        blank=True,
                        help_text="Path to the generated report file",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "file_size_bytes",
                    models.PositiveBigIntegerField(
                        default=0, help_text="Size of the report file in bytes"
                    ),
                ),
                (
                    "file_format",
                    models.CharField(
                        choices=[
                            ("docx", "Word Document"),
                            ("pdf", "PDF"),
                            ("html", "HTML"),
                        ],
                        default="docx",
                        help_text="Report file format",
                        max_length=10,
                    ),
                ),
                (
                    "generation_time_ms",
                    models.PositiveIntegerField(
                        default=0, help_text="Generation time in milliseconds"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if generation failed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="When generation started", null=True
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When generation completed", null=True
                    ),
                ),
                (
                    "analysis_results",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Analysis results included in the report",
                        related_name="report_generations",
                        to="analytics.analysisresult",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        help_text="Session this report belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report_generations",
                        to="analytics.analysissession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who requested the report",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report_generations",
                        to="analytics.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Report Generation",
                "verbose_name_plural": "Report Generations",
                "db_table": "analytics_report_generation",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GeneratedImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Image name", max_length=255)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Image description", null=True
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        help_text="Path to the image file", max_length=500
                    ),
                ),
                (
                    "file_size_bytes",
                    models.PositiveBigIntegerField(
                        help_text="Size of the image file in bytes"
                    ),
                ),
                (
                    "image_format",
                    models.CharField(
                        choices=[
                            ("png", "PNG"),
                            ("jpg", "JPEG"),
                            ("svg", "SVG"),
                            ("pdf", "PDF"),
                        ],
                        help_text="Image format",
                        max_length=10,
                    ),
                ),
                (
                    "width",
                    models.PositiveIntegerField(help_text="Image width in pixels"),
                ),
                (
                    "height",
                    models.PositiveIntegerField(help_text="Image height in pixels"),
                ),
                (
                    "dpi",
                    models.PositiveIntegerField(default=300, help_text="Image DPI"),
                ),
                (
                    "tool_used",
                    models.CharField(
                        help_text="Tool used to generate the image", max_length=100
                    ),
                ),
                (
                    "parameters_used",
                    models.JSONField(
                        default=dict, help_text="Parameters used for generation"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "analysis_result",
                    models.ForeignKey(
                        help_text="Analysis result this image belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="generated_images",
                        to="analytics.analysisresult",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who owns this image",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="generated_images",
                        to="analytics.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Generated Image",
                "verbose_name_plural": "Generated Images",
                "db_table": "analytics_generated_image",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DatasetColumn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Column name as it appears in the dataset",
                        max_length=255,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Human-readable display name for the column",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this column represents",
                        null=True,
                    ),
                ),
                (
                    "detected_type",
                    models.CharField(
                        choices=[
                            ("numeric", "Numeric"),
                            ("categorical", "Categorical"),
                            ("datetime", "DateTime"),
                            ("text", "Text"),
                            ("boolean", "Boolean"),
                            ("mixed", "Mixed"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Automatically detected data type",
                        max_length=20,
                    ),
                ),
                (
                    "confirmed_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("numeric", "Numeric"),
                            ("categorical", "Categorical"),
                            ("datetime", "DateTime"),
                            ("text", "Text"),
                            ("boolean", "Boolean"),
                            ("mixed", "Mixed"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="User-confirmed data type (overrides detected type)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Confidence score for type detection (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "null_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of null/missing values"
                    ),
                ),
                (
                    "null_percentage",
                    models.FloatField(
                        default=0.0,
                        help_text="Percentage of null values (0.0 to 100.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "unique_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of unique values"
                    ),
                ),
                (
                    "unique_percentage",
                    models.FloatField(
                        default=0.0,
                        help_text="Percentage of unique values (0.0 to 100.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "min_value",
                    models.FloatField(
                        blank=True,
                        help_text="Minimum value (for numeric columns)",
                        null=True,
                    ),
                ),
                (
                    "max_value",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum value (for numeric columns)",
                        null=True,
                    ),
                ),
                (
                    "mean_value",
                    models.FloatField(
                        blank=True,
                        help_text="Mean value (for numeric columns)",
                        null=True,
                    ),
                ),
                (
                    "median_value",
                    models.FloatField(
                        blank=True,
                        help_text="Median value (for numeric columns)",
                        null=True,
                    ),
                ),
                (
                    "std_deviation",
                    models.FloatField(
                        blank=True,
                        help_text="Standard deviation (for numeric columns)",
                        null=True,
                    ),
                ),
                (
                    "top_values",
                    models.JSONField(
                        default=list,
                        help_text="Most frequent values (for categorical columns)",
                    ),
                ),
                (
                    "value_counts",
                    models.JSONField(
                        default=dict,
                        help_text="Value frequency counts (for categorical columns)",
                    ),
                ),
                (
                    "date_format",
                    models.CharField(
                        blank=True,
                        help_text="Detected date format (for datetime columns)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        blank=True,
                        help_text="Detected timezone (for datetime columns)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "has_outliers",
                    models.BooleanField(
                        default=False,
                        help_text="Whether column has statistical outliers",
                    ),
                ),
                (
                    "has_duplicates",
                    models.BooleanField(
                        default=False, help_text="Whether column has duplicate values"
                    ),
                ),
                (
                    "is_primary_key",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column could be a primary key",
                    ),
                ),
                (
                    "is_foreign_key",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column could be a foreign key",
                    ),
                ),
                (
                    "suitable_for_correlation",
                    models.BooleanField(
                        default=False,
                        help_text="Whether column is suitable for correlation analysis",
                    ),
                ),
                (
                    "suitable_for_regression",
                    models.BooleanField(
                        default=False,
                        help_text="Whether column is suitable for regression analysis",
                    ),
                ),
                (
                    "suitable_for_clustering",
                    models.BooleanField(
                        default=False,
                        help_text="Whether column is suitable for clustering analysis",
                    ),
                ),
                (
                    "suitable_for_classification",
                    models.BooleanField(
                        default=False,
                        help_text="Whether column is suitable for classification analysis",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional metadata about the column"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list, help_text="User-defined tags for categorization"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dataset",
                    models.ForeignKey(
                        help_text="Dataset this column belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="columns",
                        to="analytics.dataset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dataset Column",
                "verbose_name_plural": "Dataset Columns",
                "db_table": "analytics_dataset_column",
                "ordering": ["dataset", "name"],
            },
        ),
        migrations.AddField(
            model_name="dataset",
            name="user",
            field=models.ForeignKey(
                help_text="User who uploaded the dataset",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="datasets",
                to="analytics.user",
            ),
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(help_text="Message content")),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("user", "User Message"),
                            ("assistant", "Assistant Response"),
                            ("system", "System Message"),
                            ("tool", "Tool Output"),
                        ],
                        help_text="Type of message",
                        max_length=20,
                    ),
                ),
                (
                    "llm_model",
                    models.CharField(
                        blank=True,
                        help_text="LLM model used for this message",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "token_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of tokens in this message"
                    ),
                ),
                (
                    "context_messages",
                    models.JSONField(
                        default=list,
                        help_text="Previous messages for context (last 10)",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional message metadata"
                    ),
                ),
                (
                    "attachments",
                    models.JSONField(
                        default=list,
                        help_text="File attachments (images, tables, etc.)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "analysis_result",
                    models.ForeignKey(
                        blank=True,
                        help_text="Analysis result this message relates to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="chat_messages",
                        to="analytics.analysisresult",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        help_text="Session this message belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_messages",
                        to="analytics.analysissession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who sent this message",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_messages",
                        to="analytics.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Chat Message",
                "verbose_name_plural": "Chat Messages",
                "db_table": "analytics_chat_message",
                "ordering": ["session", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="AuditTrail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("upload", "File Upload"),
                            ("analysis", "Analysis Execution"),
                            ("delete", "Data Deletion"),
                            ("export", "Data Export"),
                            ("admin_action", "Admin Action"),
                            ("system_event", "System Event"),
                        ],
                        help_text="Type of action performed",
                        max_length=50,
                    ),
                ),
                (
                    "action_category",
                    models.CharField(
                        choices=[
                            ("authentication", "Authentication"),
                            ("data_management", "Data Management"),
                            ("analysis", "Analysis"),
                            ("system", "System"),
                            ("security", "Security"),
                            ("compliance", "Compliance"),
                        ],
                        help_text="Category of the action",
                        max_length=50,
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("dataset", "Dataset"),
                            ("analysis_result", "Analysis Result"),
                            ("report", "Report"),
                            ("image", "Image"),
                            ("session", "Session"),
                            ("system", "System"),
                        ],
                        help_text="Type of resource affected",
                        max_length=50,
                    ),
                ),
                (
                    "resource_id",
                    models.PositiveIntegerField(
                        blank=True, help_text="ID of the affected resource", null=True
                    ),
                ),
                (
                    "resource_name",
                    models.CharField(
                        blank=True,
                        help_text="Human-readable name of the resource",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "action_description",
                    models.TextField(
                        help_text="Detailed description of the action performed"
                    ),
                ),
                (
                    "before_snapshot",
                    models.JSONField(
                        default=dict,
                        help_text="Resource state before action (masked for sensitive data)",
                    ),
                ),
                (
                    "after_snapshot",
                    models.JSONField(
                        default=dict,
                        help_text="Resource state after action (masked for sensitive data)",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="IP address of the user", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent string from HTTP request",
                        null=True,
                    ),
                ),
                (
                    "correlation_id",
                    models.CharField(
                        help_text="Unique correlation ID for tracking related events",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "request_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique request identifier",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "http_session_id",
                    models.CharField(
                        blank=True,
                        help_text="HTTP session identifier",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=True, help_text="Whether the action was successful"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if action failed",
                        null=True,
                    ),
                ),
                (
                    "execution_time_ms",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Time taken to perform the action in milliseconds",
                    ),
                ),
                (
                    "data_changed",
                    models.BooleanField(
                        default=False, help_text="Whether any data was modified"
                    ),
                ),
                (
                    "sensitive_data_accessed",
                    models.BooleanField(
                        default=False, help_text="Whether sensitive data was accessed"
                    ),
                ),
                (
                    "compliance_flags",
                    models.JSONField(
                        default=list,
                        help_text="Array of compliance flags (gdpr, hipaa, sox, pci_dss)",
                    ),
                ),
                (
                    "retention_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("archived", "Archived"),
                            ("purged", "Purged"),
                        ],
                        default="active",
                        help_text="Retention status of the audit record",
                        max_length=20,
                    ),
                ),
                (
                    "retention_expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When the audit record expires", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.CharField(
                        default="system",
                        help_text="Who created the record (user_id or 'system')",
                        max_length=100,
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        help_text="Analysis session (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_trails",
                        to="analytics.analysissession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed the action (nullable for system events)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_trails",
                        to="analytics.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Trail",
                "verbose_name_plural": "Audit Trails",
                "db_table": "analytics_audit_trail",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AnalysisTool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name identifier for the tool",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable display name", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of what the tool does"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("descriptive", "Descriptive Statistics"),
                            ("inferential", "Inferential Statistics"),
                            ("regression", "Regression Analysis"),
                            ("clustering", "Clustering"),
                            ("classification", "Classification"),
                            ("time_series", "Time Series"),
                            ("visualization", "Visualization"),
                            ("data_quality", "Data Quality"),
                            ("custom", "Custom"),
                        ],
                        help_text="Tool category for organization",
                        max_length=50,
                    ),
                ),
                (
                    "langchain_tool_name",
                    models.CharField(
                        help_text="LangChain tool identifier",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "tool_class",
                    models.CharField(
                        help_text="Python class path for the tool implementation",
                        max_length=255,
                    ),
                ),
                (
                    "tool_function",
                    models.CharField(
                        help_text="Function name within the tool class", max_length=255
                    ),
                ),
                (
                    "parameters_schema",
                    models.JSONField(
                        default=dict, help_text="JSON schema defining tool parameters"
                    ),
                ),
                (
                    "required_parameters",
                    models.JSONField(
                        default=list, help_text="List of required parameter names"
                    ),
                ),
                (
                    "optional_parameters",
                    models.JSONField(
                        default=list, help_text="List of optional parameter names"
                    ),
                ),
                (
                    "required_column_types",
                    models.JSONField(
                        default=list,
                        help_text="Required column types (numeric, categorical, etc.)",
                    ),
                ),
                (
                    "min_columns",
                    models.PositiveIntegerField(
                        default=1, help_text="Minimum number of columns required"
                    ),
                ),
                (
                    "max_columns",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="Maximum number of columns allowed",
                        null=True,
                    ),
                ),
                (
                    "min_rows",
                    models.PositiveIntegerField(
                        default=1, help_text="Minimum number of rows required"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the tool is active and available",
                    ),
                ),
                (
                    "is_premium",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the tool requires premium access",
                    ),
                ),
                (
                    "execution_timeout",
                    models.PositiveIntegerField(
                        default=300, help_text="Maximum execution time in seconds"
                    ),
                ),
                (
                    "memory_limit_mb",
                    models.PositiveIntegerField(
                        default=512, help_text="Maximum memory usage in MB"
                    ),
                ),
                (
                    "output_types",
                    models.JSONField(
                        default=list,
                        help_text="Types of output this tool produces (table, chart, text, etc.)",
                    ),
                ),
                (
                    "generates_images",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the tool generates images/charts",
                    ),
                ),
                (
                    "generates_tables",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the tool generates data tables",
                    ),
                ),
                (
                    "generates_text",
                    models.BooleanField(
                        default=True, help_text="Whether the tool generates text output"
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of times this tool has been used"
                    ),
                ),
                (
                    "success_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of successful executions"
                    ),
                ),
                (
                    "error_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of failed executions"
                    ),
                ),
                (
                    "average_execution_time",
                    models.FloatField(
                        default=0.0, help_text="Average execution time in seconds"
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0.0", help_text="Tool version", max_length=20
                    ),
                ),
                (
                    "author",
                    models.CharField(
                        blank=True, help_text="Tool author", max_length=255, null=True
                    ),
                ),
                (
                    "documentation_url",
                    models.URLField(
                        blank=True, help_text="URL to tool documentation", null=True
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list, help_text="Tags for categorization and search"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True, help_text="When the tool was last used", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Analysis Tool",
                "verbose_name_plural": "Analysis Tools",
                "db_table": "analytics_analysis_tool",
                "ordering": ["category", "display_name"],
                "indexes": [
                    models.Index(
                        fields=["category"], name="analytics_a_categor_9a45b1_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="analytics_a_is_acti_fde70f_idx"
                    ),
                    models.Index(
                        fields=["is_premium"], name="analytics_a_is_prem_d75e88_idx"
                    ),
                    models.Index(
                        fields=["usage_count"], name="analytics_a_usage_c_f17f0f_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="analysissession",
            name="additional_datasets",
            field=models.ManyToManyField(
                blank=True,
                help_text="Additional datasets used in this session",
                related_name="additional_sessions",
                to="analytics.dataset",
            ),
        ),
        migrations.AddField(
            model_name="analysissession",
            name="primary_dataset",
            field=models.ForeignKey(
                help_text="Primary dataset for this session",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="primary_sessions",
                to="analytics.dataset",
            ),
        ),
        migrations.AddField(
            model_name="analysissession",
            name="user",
            field=models.ForeignKey(
                help_text="User who owns this session",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="analysis_sessions",
                to="analytics.user",
            ),
        ),
        migrations.AddField(
            model_name="analysisresult",
            name="dataset",
            field=models.ForeignKey(
                help_text="Dataset analyzed",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="analysis_results",
                to="analytics.dataset",
            ),
        ),
        migrations.AddField(
            model_name="analysisresult",
            name="session",
            field=models.ForeignKey(
                help_text="Session this result belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="results",
                to="analytics.analysissession",
            ),
        ),
        migrations.AddField(
            model_name="analysisresult",
            name="tool_used",
            field=models.ForeignKey(
                help_text="Tool used to generate this result",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="results",
                to="analytics.analysistool",
            ),
        ),
        migrations.AddField(
            model_name="analysisresult",
            name="user",
            field=models.ForeignKey(
                help_text="User who owns this result",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="analysis_results",
                to="analytics.user",
            ),
        ),
        migrations.CreateModel(
            name="AgentStep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "step_number",
                    models.PositiveIntegerField(
                        help_text="Step number in the agent run"
                    ),
                ),
                (
                    "thought",
                    models.TextField(help_text="Agent's thought process for this step"),
                ),
                (
                    "tool_name",
                    models.CharField(
                        help_text="Name of the tool used in this step", max_length=100
                    ),
                ),
                (
                    "parameters_json",
                    models.JSONField(
                        default=dict, help_text="Parameters passed to the tool"
                    ),
                ),
                (
                    "observation_json",
                    models.JSONField(
                        default=dict, help_text="Observation/result from tool execution"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        help_text="Status of this step",
                        max_length=20,
                    ),
                ),
                (
                    "token_usage",
                    models.PositiveIntegerField(
                        default=0, help_text="Token usage for this step"
                    ),
                ),
                (
                    "execution_time_ms",
                    models.PositiveIntegerField(
                        default=0, help_text="Execution time in milliseconds"
                    ),
                ),
                (
                    "memory_used_mb",
                    models.FloatField(default=0.0, help_text="Memory used in MB"),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Confidence score for this step (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "reasoning",
                    models.TextField(
                        blank=True, help_text="Reasoning behind this step", null=True
                    ),
                ),
                (
                    "next_action",
                    models.TextField(
                        blank=True, help_text="Planned next action", null=True
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="When this step started", null=True
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        blank=True, help_text="When this step completed", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if step failed", null=True
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of retries for this step"
                    ),
                ),
                (
                    "max_retries",
                    models.PositiveIntegerField(
                        default=3, help_text="Maximum retries allowed"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "agent_run",
                    models.ForeignKey(
                        help_text="Agent run this step belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="steps",
                        to="analytics.agentrun",
                    ),
                ),
            ],
            options={
                "verbose_name": "Agent Step",
                "verbose_name_plural": "Agent Steps",
                "db_table": "analytics_agent_step",
                "ordering": ["agent_run", "step_number"],
            },
        ),
        migrations.AddField(
            model_name="agentrun",
            name="dataset",
            field=models.ForeignKey(
                help_text="Dataset being analyzed",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="agent_runs",
                to="analytics.dataset",
            ),
        ),
        migrations.AddField(
            model_name="agentrun",
            name="parent_run",
            field=models.ForeignKey(
                blank=True,
                help_text="Parent agent run (for sub-runs)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sub_runs",
                to="analytics.agentrun",
            ),
        ),
        migrations.AddField(
            model_name="agentrun",
            name="session",
            field=models.ForeignKey(
                blank=True,
                help_text="Analysis session (optional)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="agent_runs",
                to="analytics.analysissession",
            ),
        ),
        migrations.AddField(
            model_name="agentrun",
            name="user",
            field=models.ForeignKey(
                help_text="User who initiated the agent run",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="agent_runs",
                to="analytics.user",
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["token_usage_current_month"],
                name="analytics_u_token_u_331f81_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["storage_used_bytes"], name="analytics_u_storage_589b9b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["last_activity"], name="analytics_u_last_ac_35ce0c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_premium"], name="analytics_u_is_prem_0cfcaf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sandboxexecution",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_s_user_id_2678ca_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sandboxexecution",
            index=models.Index(
                fields=["session"], name="analytics_s_session_0bca62_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sandboxexecution",
            index=models.Index(fields=["status"], name="analytics_s_status_94b93c_idx"),
        ),
        migrations.AddIndex(
            model_name="sandboxexecution",
            index=models.Index(
                fields=["language"], name="analytics_s_languag_b4260f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reportgeneration",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_r_user_id_99fcdb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reportgeneration",
            index=models.Index(
                fields=["session"], name="analytics_r_session_f486c5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reportgeneration",
            index=models.Index(fields=["status"], name="analytics_r_status_51c599_idx"),
        ),
        migrations.AddIndex(
            model_name="reportgeneration",
            index=models.Index(
                fields=["template_type"], name="analytics_r_templat_e04669_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="generatedimage",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_g_user_id_9fd954_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="generatedimage",
            index=models.Index(
                fields=["analysis_result"], name="analytics_g_analysi_3291ec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="generatedimage",
            index=models.Index(
                fields=["tool_used"], name="analytics_g_tool_us_a56245_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetcolumn",
            index=models.Index(
                fields=["dataset", "detected_type"],
                name="analytics_d_dataset_ef41d3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="datasetcolumn",
            index=models.Index(
                fields=["detected_type"], name="analytics_d_detecte_1ea308_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetcolumn",
            index=models.Index(
                fields=["confidence_score"], name="analytics_d_confide_2ec82b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetcolumn",
            index=models.Index(
                fields=["null_percentage"], name="analytics_d_null_pe_4afea2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetcolumn",
            index=models.Index(
                fields=["unique_percentage"], name="analytics_d_unique__29d9c4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="datasetcolumn",
            unique_together={("dataset", "name")},
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_d_user_id_52fc22_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=models.Index(
                fields=["processing_status"], name="analytics_d_process_f1682a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=models.Index(
                fields=["file_hash"], name="analytics_d_file_ha_714cc8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=models.Index(
                fields=["original_format"], name="analytics_d_origina_ce4d01_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=models.Index(
                fields=["row_count"], name="analytics_d_row_cou_13e07b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=models.Index(
                fields=["data_quality_score"], name="analytics_d_data_qu_24f3c6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_c_user_id_fb40a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["session", "created_at"], name="analytics_c_session_cb717a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["message_type"], name="analytics_c_message_61365c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["llm_model"], name="analytics_c_llm_mod_23f226_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_a_user_id_4fbfdb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["action_type"], name="analytics_a_action__86ee61_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["action_category"], name="analytics_a_action__702ea5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["resource_type", "resource_id"],
                name="analytics_a_resourc_356909_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["correlation_id"], name="analytics_a_correla_870f51_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["success"], name="analytics_a_success_7ddae3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["retention_status"], name="analytics_a_retenti_8b5845_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audittrail",
            index=models.Index(
                fields=["retention_expires_at"], name="analytics_a_retenti_4ebfc6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysissession",
            index=models.Index(
                fields=["user", "is_active"], name="analytics_a_user_id_e42f28_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysissession",
            index=models.Index(
                fields=["primary_dataset"], name="analytics_a_primary_9f99ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysissession",
            index=models.Index(
                fields=["created_at"], name="analytics_a_created_0b489f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysissession",
            index=models.Index(
                fields=["last_accessed"], name="analytics_a_last_ac_3cbf14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_a_user_id_344abd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["tool_used"], name="analytics_a_tool_us_cbcfe0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["session"], name="analytics_a_session_4e0503_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["dataset"], name="analytics_a_dataset_94f29c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["cache_key"], name="analytics_a_cache_k_c49a2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["cache_expires_at"], name="analytics_a_cache_e_d5a956_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agentstep",
            index=models.Index(
                fields=["agent_run", "step_number"],
                name="analytics_a_agent_r_50cfdc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="agentstep",
            index=models.Index(fields=["status"], name="analytics_a_status_83e8c9_idx"),
        ),
        migrations.AddIndex(
            model_name="agentstep",
            index=models.Index(
                fields=["tool_name"], name="analytics_a_tool_na_0438af_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="agentstep",
            unique_together={("agent_run", "step_number")},
        ),
        migrations.AddIndex(
            model_name="agentrun",
            index=models.Index(
                fields=["user", "created_at"], name="analytics_a_user_id_0ccaca_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agentrun",
            index=models.Index(
                fields=["dataset"], name="analytics_a_dataset_b1f09a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agentrun",
            index=models.Index(fields=["status"], name="analytics_a_status_778079_idx"),
        ),
        migrations.AddIndex(
            model_name="agentrun",
            index=models.Index(
                fields=["correlation_id"], name="analytics_a_correla_00b7e3_idx"
            ),
        ),
    ]
